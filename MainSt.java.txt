import java.util.Scanner;

public class Main {
    private static Scanner scanner = new Scanner(System.in);
    private static TicketOffice ticketOffice = TicketOffice.getInstance();

    public static void main(String[] args) {
        System.out.println("СИСТЕМА УПРАВЛЕНИЯ КАССОЙ ВОКЗАЛА");

        boolean running = true;
        while (running) {
            displayMenu();
            int choice = getIntInput("Выберите действие: ");

            switch (choice) {
                case 1:
                    setTariff();
                    break;
                case 2:
                    displayTariffs();
                    break;
                case 3:
                    registerPassenger();
                    break;
                case 4:
                    sellTicket();
                    break;
                case 5:
                    calculatePassengerTotal();
                    break;
                case 6:
                    displayPassengersByDirection();
                    break;
                case 7:
                    displayAllTickets();
                    break;
                case 8:
                    ticketOffice.cleanup();
                    break;
                case 0:
                    running = false;
                    System.out.println("До свидания!");
                    break;
                default:
                    System.out.println("Неверный выбор. Попробуйте снова.");
            }
        }
        scanner.close();
    }

    private static void displayMenu() {
        System.out.println("\nМЕНЮ ");
        System.out.println("1. Установить тариф на направление");
        System.out.println("2. Показать все тарифы");
        System.out.println("3. Зарегистрировать пассажира");
        System.out.println("4. Продать билет");
        System.out.println("5. Рассчитать общую стоимость билетов пассажира");
        System.out.println("6. Показать пассажиров по направлению");
        System.out.println("7. Показать все проданные билеты");
        System.out.println("8. Очистить систему");
        System.out.println("0. Выход");
    }

    private static void setTariff() {
        System.out.println("\nУстановка тарифа");
        boolean validInput = false;

        while (!validInput) {
            displayDirections();
            int directionChoice = getIntInput("Выберите направление (1-8): ") - 1;

            if (directionChoice >= 0 && directionChoice < Direction.values().length) {
                Direction direction = Direction.values()[directionChoice];

                boolean validPrice = false;
                while (!validPrice) {
                    double price = getDoubleInput("Введите стоимость билета: ");
                    if (price <= 0) {
                        System.out.println("Ошибка! Стоимость должна быть положительной. Попробуйте снова.");
                    } else if (price > 10000) {
                        System.out.println("Ошибка! Слишком большая стоимость. Максимальная цена билета: 10 000 руб. Попробуйте снова.");
                    } else {
                        ticketOffice.setTariff(direction, price);
                        validPrice = true;
                        validInput = true;
                    }
                }
            } else {
                System.out.println("Неверный выбор направления. Попробуйте снова.");
            }
        }
    }

    private static void displayTariffs() {
        ticketOffice.displayAllTariffs();
    }

    private static void registerPassenger() {
        System.out.println("\nРегистрация пассажира");
        boolean validInput = false;

        while (!validInput) {
            String series;
            while (true) {
                System.out.print("Введите серию паспорта (4 цифры): ");
                series = scanner.nextLine().trim();

                if (series.matches("\\d{4}")) {
                    break;
                } else {
                    System.out.println("Ошибка! Серия паспорта должна содержать ровно 4 цифры. Попробуйте снова.");
                }
            }

            String number;
            while (true) {
                System.out.print("Введите номер паспорта (6 цифр): ");
                number = scanner.nextLine().trim();

                if (number.matches("\\d{6}")) {
                    break;
                } else {
                    System.out.println("Ошибка! Номер паспорта должен содержать ровно 6 цифр. Попробуйте снова.");
                }
            }


            String fullPassport = series + " " + number;

            if (ticketOffice.findPassengerByPassport(fullPassport) != null) {
                System.out.println("Пассажир с паспортом " + fullPassport + " уже зарегистрирован. Попробуйте снова.");
                continue;
            }
            String fullName;
            while (true) {
                System.out.print("Введите ФИО пассажира: ");
                fullName = scanner.nextLine().trim();

                if (fullName.matches("[а-яА-ЯёЁa-zA-Z\\s-'']{2,50}")) {
                    String[] nameParts = fullName.split("\\s+");
                    if (nameParts.length >= 2) {
                        boolean allPartsValid = true;
                        for (String part : nameParts) {
                            if (part.length() < 2) {
                                System.out.println("Ошибка! Каждая часть ФИО должна быть не короче 2 букв. '" + part + "' слишком короткое.");
                                allPartsValid = false;
                                break;
                            }
                        }
                        if (allPartsValid) {
                            break;
                        }
                    } else {
                        System.out.println("Ошибка! Введите Фамилию и Имя (минимум 2 слова). Попробуйте снова.");
                    }
                } else {
                    System.out.println("Ошибка! ФИО должно содержать только буквы (русские/английские), пробелы, дефисы и апострофы. Попробуйте снова.");
                }
            }
            Passenger passenger = new Passenger(fullPassport, fullName);
            ticketOffice.addPassenger(passenger);
            System.out.println("Пассажир успешно зарегистрирован: " + passenger);
            validInput = true;
        }
    }

    private static void sellTicket() {
        System.out.println("\nПродажа билета");
        boolean validInput = false;

        while (!validInput) {
            System.out.print("Введите серию и номер паспорта (через пробел): ");
            String passport = scanner.nextLine();

            Passenger passenger = ticketOffice.findPassengerByPassport(passport);
            if (passenger == null) {
                System.out.println("Пассажир не найден. Сначала зарегистрируйте пассажира.");
                return;
            }

            boolean validDirection = false;
            while (!validDirection) {
                displayDirections();
                int directionChoice = getIntInput("Выберите направление (1-8): ") - 1;

                if (directionChoice >= 0 && directionChoice < Direction.values().length) {
                    Direction direction = Direction.values()[directionChoice];
                    if (ticketOffice.sellTicket(passenger, direction)) {
                        validDirection = true;
                        validInput = true;
                    } else {
                        System.out.println("Не удалось продать билет. Попробуйте другое направление.");
                    }
                } else {
                    System.out.println("Неверный выбор направления. Попробуйте снова.");
                }
            }
        }
    }

    private static void calculatePassengerTotal() {
        System.out.println("\nРасчет общей стоимости");
        boolean validInput = false;

        while (!validInput) {
            System.out.print("Введите серию и номер паспорта (через пробел): ");
            String passport = scanner.nextLine();

            Passenger passenger = ticketOffice.findPassengerByPassport(passport);
            if (passenger != null) {
                double total = ticketOffice.calculateTotalCostForPassenger(passenger);
                System.out.println("Общая стоимость билетов для " + passenger.getFullName() +
                        ": " + total + " руб.");
                validInput = true;
            } else {
                System.out.println("Пассажир не найден. Попробуйте снова или зарегистрируйте нового.");
                boolean validAnswer = false;
                while (!validAnswer) {
                    System.out.print("Хотите попробовать другой паспорт? (да/нет): ");
                    String answer = scanner.nextLine().toLowerCase();

                    if (answer.equals("да")) {
                        validAnswer = true;
                    } else if (answer.equals("нет")) {
                        validAnswer = true;
                        validInput = true;
                    } else {
                        System.out.println("Ошибка! Пожалуйста, введите 'да' или 'нет'.");
                    }
                }
            }
        }
    }

    private static void displayPassengersByDirection() {
        System.out.println("\nПассажиры по направлению");
        boolean validInput = false;

        while (!validInput) {
            displayDirections();
            int directionChoice = getIntInput("Выберите направление (1-8): ") - 1;

            if (directionChoice >= 0 && directionChoice < Direction.values().length) {
                Direction direction = Direction.values()[directionChoice];
                ticketOffice.displayPassengersByDirection(direction);
                validInput = true;
            } else {
                System.out.println("Неверный выбор направления. Попробуйте снова.");
            }
        }
    }

    private static void displayAllTickets() {
        ticketOffice.displayAllTickets();
    }

    private static void displayDirections() {
        System.out.println("\nДоступные направления:");
        Direction[] directions = Direction.values();
        for (int i = 0; i < directions.length; i++) {
            System.out.println((i + 1) + ". " + directions[i].getDisplayName());
        }
    }

    private static int getIntInput(String prompt) {
        while (true) {
            System.out.print(prompt);
            if (scanner.hasNextInt()) {
                int value = scanner.nextInt();
                scanner.nextLine(); // очистка буфера
                return value;
            } else {
                System.out.println("Ошибка! Введите целое число.");
                scanner.next(); // очистка неверного ввода
            }
        }
    }

    private static double getDoubleInput(String prompt) {
        while (true) {
            System.out.print(prompt);
            if (scanner.hasNextDouble()) {
                double value = scanner.nextDouble();
                scanner.nextLine(); // очистка буфера
                return value;
            } else {
                System.out.println("Ошибка! Введите число.");
                scanner.next(); // очистка неверного ввода
            }
        }
    }
}